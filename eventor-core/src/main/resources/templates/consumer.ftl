package com.example.consumer;

<#-- Import all DTOs referenced in methods -->
<#assign dtoImports = []>
<#list consumer.methods as method>
    <#if !dtoImports?seq_contains("com.example.dto." + method.dto)>
        <#assign dtoImports = dtoImports + ["com.example.dto." + method.dto]>
    </#if>
</#list>
<#list dtoImports as dtoImport>
import ${dtoImport};
</#list>

<#-- Import all dependency types -->
<#assign dependencyImports = []>
<#list consumer.methods as method>
    <#list method.dependencies as dep>
        <#if !dependencyImports?seq_contains(dep.type)>
            <#assign dependencyImports = dependencyImports + [dep.type]>
        </#if>
    </#list>
</#list>
<#list dependencyImports as depImport>
import ${depImport};
</#list>

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.stereotype.Component;

/**
 * Generated Consumer class for ${consumer.name}
 * Generated by Eventry Spring Event Generator
 */
@Component
public class ${consumer.name} {

<#-- Generate fields for all unique dependencies -->
<#assign uniqueDependencies = []>
<#list consumer.methods as method>
    <#list method.dependencies as dep>
        <#assign found = false>
        <#list uniqueDependencies as uniqueDep>
            <#if uniqueDep.beanName == dep.beanName>
                <#assign found = true>
                <#break>
            </#if>
        </#list>
        <#if !found>
            <#assign uniqueDependencies = uniqueDependencies + [dep]>
        </#if>
    </#list>
</#list>

<#list uniqueDependencies as dep>
    private final ${dep.type?split(".")?last} ${dep.beanName};
</#list>

    @Autowired
    public ${consumer.name}(<#list uniqueDependencies as dep>${dep.type?split(".")?last} ${dep.beanName}<#if dep_has_next>, </#if></#list>) {
<#list uniqueDependencies as dep>
        this.${dep.beanName} = ${dep.beanName};
</#list>
    }

<#list consumer.methods as method>
    /**
     * Handles ${method.dto} events from ${method.topic} topic
     * @param event the received event
     */
    @KafkaListener(
        topics = "${method.topic}",
        groupId = "${method.groupId}",
        containerFactory = "${method.listenerFactory}"
    )
    public void ${method.methodName}(${method.dto} event) {
        // TODO: Implement your business logic here

        // Generated dependency method calls:
<#list method.dependencies as dep>
    <#list dep.methodCalls as methodCall>
        ${dep.beanName}.${methodCall}(event);
    </#list>
</#list>
    }

</#list>
}
